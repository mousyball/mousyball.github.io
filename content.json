{"pages":[],"posts":[{"title":"HEXO - Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2017/01/01/hello-world/"},{"title":"Cmder-powerline-env-prompt for conda","text":"紀錄一下修改 Cmder-powerline-prompt 的過程 起因原先使用 Cmder-powerline-prompt 時，發現一個缺點，就是這個設定不能像一般 prompt，能在 prompt symbol 前顯示 anaconda 的環境名稱。 順便一提，cmder 本身已經支援此功能，但是對於使用者自訂的主題來說，通常會 override 原本的 prompt setting，所以還是要做一些修改。另外一個需要動手修改原因就是主題的擁有者似乎已經不更新了。 本修改 Cmder-powerline-env-prompt for conda 是融合兩版本結果- Cmder-powerline-prompt: 原作者- cmder-powerline-venv-prompt: 修改原作且有環境變數的版本，但也因為太久沒更新而出現了一些 BUG 修改的內容先說個題外話，因為我本身完全不懂 lua，所以我的貢獻只是讓他正常工作而已，並沒有修改其中的功能。 另外，cmder-powerline-venv-prompt 的作者在完成之後，Cmder-powerline-prompt 的原作有持續更新了一些功能，因此就順手整合一下。 以 cmder-powerline-venv-prompt 為基礎，加入 Cmder-powerline-prompt 的環境變數修改內容 修改 function get_virtual_env(env_var) - 因為使用原先的版本會造成一個 BUG，而且 env_path 已經是我們要的環境名稱了，所以就直接 return。 BUG: attempt to index global ‘exports’ (a nil value) From12345678function get_virtual_env(env_var) env_path = clink.get_env(env_var) if env_path then basen = exports.basename(env_path) return basen end return falseend To1234567function get_virtual_env(env_var) env_path = clink.get_env(env_var) if env_path then return env_path end return falseend 修改 function conda_prompt_filter() - 原先的作法不管怎樣輸出都是 nil，查了一下才發現使用 'CONDA_DEFAULT_ENV' 才會正確回傳環境變數名稱。 From 1local python_env = get_virtual_env('DEFAULT_ENV') To 1local python_env = get_virtual_env('CONDA_DEFAULT_ENV') 調整 override the built-in filters 的順序 - 若順序或優先權不對，也是會被蓋過而沒顯示。 From 12345clink.prompt.register_filter(conda_prompt_filter, 20)clink.prompt.register_filter(lambda_prompt_filter, 55)clink.prompt.register_filter(colorful_hg_prompt_filter, 60)clink.prompt.register_filter(colorful_git_prompt_filter, 60)clink.prompt.register_filter(venv_prompt_filter, 65) To 12345clink.prompt.register_filter(lambda_prompt_filter, 55)clink.prompt.register_filter(conda_prompt_filter, 58)clink.prompt.register_filter(venv_prompt_filter, 58)clink.prompt.register_filter(colorful_hg_prompt_filter, 60)clink.prompt.register_filter(colorful_git_prompt_filter, 60) 成果 Github repo:- Cmder-powerline-env-prompt for conda 後記在 Cmder 最新的 v1.3.5 版本，這個主題會完全不能使用，Cmder v1.3.4 卻可以正常工作。感覺是這個主題的 .lua 檔完全看不到 clink.lua 的內容所產生的 BUG，之後有空再找個時間發個 issue 問問看是怎麼回事。以下是發生的 BUG： BUG in Cmder v1.3.5- attempt to call global ‘get_git_branch’ (a nil value) 20180203 Update結果就用一個很簡單的做法就搞定了，就是把缺的 funciotn 從 clink.lua 複製過來就好。 缺的有下列兩個 function: 12local function get_git_branch(git_dir)local function get_hg_branch() 新增 function 後，就可以正常在 Cmder v1.3.5 下使用了。 20180409 Update原先在 vscode terminal 使用 cmder 時會有一個 bug，就是會在 prompt symbol λ 後面隨機產生一些空白，它會讓鼠標動畫和實際位置搭不上，而且這個情況是隨機發生的，因此我也沒有太理它，就只是讓人很煩躁而已。 直到今天意外在改 git-bash prompt 的時候發現，我使用 λ 當作 prompt symbol 也會發生這個情況，所以很直覺判斷說應該是編碼的問題。果不其然，當我把 λ 改成 ASCII 內的符號時 ($, #, @, …)，那個隨機空白情況就消失了。 完全不知道為什麼使用 utf-8 的符號會有這個問題，也有使用 Active code page: 65001，不過至少意外地解決掉這個 bug 了。","link":"/Cmder-powerline-env-prompt-for-conda"},{"title":"Hello World","text":"這個blog基本上是存放我的一些學習筆記，和一些學習過程遇過問題的解決方法，如果各位路過看到我有寫錯什麼，請各位不吝指教，我會很感激您的。 順便留一下我寫這篇文章的契機：為什麼你應該寫一個技術分享的部落格？ 我原本其實很懶得記錄學習歷程的，一來是寫出來給人看，如果是錯的，會誤導別人；二來是我總是希望把內容寫的詳細一點，會花很多時間。但是東西越學越多之後，發現很多記憶都不是很清楚了(年紀大惹QQ)，所以我還是決定開始寫這個部落格。 最後，用連結內的一句話結尾吧。 一個最好的學習方式，就是嘗試把自己學會的東西拿來教別人。","link":"/hello-world"},{"title":"Hexo + Github Blog 建立過程","text":"這篇文章就簡單紀錄一下，建立這個 Blog 的過程。 建置環境OS: Windows 10Hexo: 3.2.2Node.js: 8.9.4Github Desktop Blog 建立步驟 安裝 Node.js 和 Git Desktop - Node.js：版本我是載當時最新的 8.9.4。 - Github Desktop Github 配置創建放置 Blog 檔案的 Repository [Note] Repository 名稱為 yourname.github.io，yourname是你的帳號名稱 Github Desktop 與 Github 同步首先，把剛創的 Repository Clone 到本地端：然後右鍵剛拉下來的 Repository，選取 Open in Git Shell 打開 powershell，執行指令將 Github 上的倉庫拉到本地端。 1git pull origin master 安裝 Hexo首先，使用 npm 安裝 hexo 1npm install -g hexo-cli 安裝成功後，輸入以下指令可查看安裝版本 1234567$ hexo versionhexo: 3.2.2hexo-cli: 1.0.2os: Windows_NT 10.0.10586 win32 x64http_parser: 2.7.0node: 7.3.0... 接下來就可以來初始化我們的第一個 Blog 了，依序輸入以下指令： 1234hexo init # 初始化 blognpm install # 安裝相關套件hexo g # 產生 blog 靜態文件hexo s # 啟動本地瀏覽，用於預覽 blog 再來就可以用瀏覽器訪問http://localhost:4000/了，預設會有一個 Hello-World 的文章，如 Hexo’s Hello World。 安裝其他插件 hexo-deployer-git 1npm install hexo-deployer-git --save 修改設定- repo: 儲存庫（Repository）網址- branch: 分支名稱。如果您使用的是 GitHub 或 GitCafe 的話，程式會嘗試自動偵測。- message: 自定提交訊息 12345deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] hexo-admin 安裝 hexo 後台 1npm install hexo-admin-qiniu --save 使用方法 12$ hexo server -dopen &quot;http://localhost:4000/admin/&quot; hexo-git-backup 1npm install hexo-git-backup --save 使用方法 1hexo backup hexo-generator-sitemap 安裝 1$ npm install hexo-generator-sitemap --save 於 _config.yml 加入 12sitemap: path: sitemap.xml HEXO Blog 設定安裝主題使用的主題為 NEXT 12cd hexogit clone https://github.com/theme-next/hexo-theme-next themes/next 於 _config.yml 中修改使用主題 1theme: next 主題設定 scheme 至 next/_config.yml 修改至 scheme: Muse animation 因為我不喜歡動畫所以把它關掉 123# Use velocity to animate everything.motion: enable: false disqus 12345disqus: enable: true shortname: [your_disqus_name] count: true lazyload: false MathJax 12math: enable: true Post updated time 1updated_at: true Blog 配置 tags/categories page 設定方法照 iissnan/hexo-theme-next - Wiki - 创建分类页面 - 创建标签云页面 這兩個教學去設定 設定文章開頭的 snippet 在 scaffolds 下的 post.md 文件，其功能是用來建置文章的初始狀態。 1234567title: {{ title }}author: Mo1cibodate: {{ date }}tags:categories:permalink:mathjax: false Disqus 留言板 簡單步驟如下 1.去 Disqus 申請帳號 2.去 next/_config.yml 中貼上自己的 disqus shortname 12345disqus: enable: true shortname: [your_disqus_name] count: true lazyload: false 詳細的設定及修改可以參考以下網頁 解決 Hexo Comment ! Disqus 留言系統基本設定與匯入舊留言教學 設定字型 1.於 Google Fonts 上找想要的字型，例如 DF Dejavu Pro Regular 2.於 next/_config.yml 中加入 1234global: external: true family: DF Dejavu Pro Regular size: Permalink 使用永久連結主要有兩個原因 1.避免修改標題後，搜尋引擎找到舊的網址。 2.自訂英文網址，使搜尋引擎關鍵字容易查詢到。 可參考: Permalinks Google Analytics 註冊 Google Analytics 修改 _config.yml，新增ID：google_analytics: UA-xxxxxxxx-x Google Search console 依照指示將一個 html 上傳至 repo 驗證 Favicon 依照喜好於 next/_config.yml 修改網頁的小圖示 圖片路徑為： ...\\Blog\\themes\\next\\source\\images 12345favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg Avatar 依照喜好於 next/_config.yml 修改網頁的小圖示 圖片路徑為： ...\\Blog\\themes\\next\\source\\images 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /images/avatar.gif sitemap安裝完 hexo-generator-sitemap，然後 deploy 就會在 public 資料夾自動產生 sitemap.xml 再來到 _config.yml 加入 sitemap 選項 然後就可以到 google search console 上面設定 sitemap 路徑了 以往經驗大概過一兩天就會撈到資料了 可參考: ｜Hexo优化｜如何向google提交sitemap（详细） 常用 HEXO 指令新增 page / post 12$ hexo new &quot;postName&quot; # 產生新的文章$ hexo new page &quot;pageName&quot; # 產生新的頁面 指令簡寫 1234$ hexo n == hexo new # 產生新的 post/page/draft$ hexo g == hexo generate # 產生靜態文件$ hexo s == hexo server # 啟動本地瀏覽$ hexo d == hexo deploy # 部署文件至 Github 上 指令組合 12$ hexo d -g # 產生靜態文件後，部署 blog$ hexo s -g # 產生靜態文件後，預覽 blog 使用 hexo-admin 12$ hexo server -dopen &quot;http://localhost:4000/admin/&quot;","link":"/Hexo-Github-Build"},{"title":"Image resize in HTML","text":"目前Blog才剛創，編輯還不太熟，突然想到要放圖片怎麼辦？ 以下是Markdown放圖的語法 1![link text](url) RRR，好像太大了。Google後才發現，Markdown好像不支援內建resize。然後又google到這篇Image re-size to 50% of original size in HTML雖然我不會html，不過照著回答的方法做可以成功。 後來又發現這個HTML的網站很詳細：w3schoolHTML &lt;img&gt; Tag Resize語法依照比例縮放測試後發現，給定width百分比就好。其中alt屬性對應到的是[link text] 1&lt;img src=&quot;url&quot; alt=&quot;text&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt; 依指定長寬縮放1&lt;img src=&quot;url&quot; alt=&quot;text&quot; width=&quot;150&quot; height=&quot;300&quot; /&gt; Image Source: Link","link":"/image-resize"},{"title":"Hexo 顯示數學公式","text":"問題: 無法在 Hexo 中直接顯示數學公式？在 Markdown 編輯器中，一般都會支援 MathJax or LaTex 的數學公式語法。 但是推上 Blog 之後，顯示還是如原本一樣。 1\\alpha^3 + \\beta^6 - \\gamma^2 \\times 3x \\div 8y^5 + \\omega ## 如何在 Hexo 中顯示數學公式 Google 後發現兩種解法： 修改 marked.js 修改的原因是 Hexo 渲染時，數學公式會與預設的跳脫字元衝突，導致數學公式不完整，而顯示不出來。 不過這個方法的缺點就是耗時修改，時間就是金錢，有簡單的方法就用唄。 安裝 Hexo MathJax plugin (推薦) 只要在部落格路徑下的 git shell 中，執行下列安裝指令即可： 1npm install hexo-math --save 於 _config.yml 加入 1234567891011math: engine: 'mathjax' # or 'katex' mathjax: src: custom_mathjax_source config: # MathJax config katex: css: custom_css_source js: custom_js_source # not used config: # KaTeX config 然後數學公式就可以正常顯示拉！ $$\\alpha^3 + \\beta^6 - \\gamma^2 \\times 3x \\div 8y^5 + \\omega$$ 20180211 更新最近換了 next 主題，發現 mathjax 好像失效了，又重新找方法看了一下 next/_config.yml 似乎有自帶支援 mathjax 於 next/_config.yml 開啟 mathjax 支援 123# Math Equations Render Supportmath:enable: true 於 post 的 snippet 加入 mathjax 12345678---title:author:date:tags:categories:mathjax: true--- 結果就可以正常顯示了，收工。 ## Reference Hexo MathJax插件搭建一个支持LaTEX的hexo博客MathJax have no effect #1774","link":"/mathjax-support"},{"title":"VSCode 使用設定","text":"這篇主要在記錄使用 VSCode 環境建立的採坑過程 OS: Windows 10 一般設定在 使用者設定 中添加下列修改 12345&quot;editor.formatOnPaste&quot;: true,&quot;editor.fontSize&quot;: 15,&quot;editor.fontFamily&quot;: &quot;DejaVu Sans Mono, '微軟正黑體'&quot;,&quot;editor.fontLigatures&quot;: true,&quot;editor.smoothScrolling&quot;: true, Keybindings為字串和 markdown 設定的快捷鍵，不確定這叫什麼名字，就叫 auto surrounding feature用途是一鍵將字串包起來，使用粗體、雙引號就不用一直移來移去了 設定方法： Ctrl+K then Ctrl+S Click to open keybindings.json 123456789101112131415161718192021222324252627{ // wrap a selection with single quotes (') &quot;key&quot;: &quot;'&quot;, &quot;command&quot;: &quot;editor.action.insertSnippet&quot;, &quot;when&quot;: &quot;editorHasSelection &amp;&amp; editorTextFocus&quot;, &quot;args&quot;: { &quot;snippet&quot;: &quot;'${0:${TM_SELECTED_TEXT}}$0'&quot; }},{ // wrap a selection with single quotes (*) &quot;key&quot;: &quot;numpad_multiply&quot;, &quot;command&quot;: &quot;editor.action.insertSnippet&quot;, &quot;when&quot;: &quot;editorHasSelection &amp;&amp; editorTextFocus&quot;, &quot;args&quot;: { &quot;snippet&quot;: &quot;**${0:${TM_SELECTED_TEXT}}$0**&quot; }},{ // wrap a selection with single quotes (&quot;) &quot;key&quot;: &quot;shift+'&quot;, &quot;command&quot;: &quot;editor.action.insertSnippet&quot;, &quot;when&quot;: &quot;editorHasSelection &amp;&amp; editorTextFocus&quot;, &quot;args&quot;: { &quot;snippet&quot;: &quot;\\&quot;${0:${TM_SELECTED_TEXT}}$0\\&quot;&quot; }}, Integrated Terminal VSCode - Integrated Terminal - 可以在 使用者設定 中，修改所需的 default terminal 1234567891011121314151617181920212223242526// Command Prompt&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;// PowerShell&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&quot;// Git Bash&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe&quot;// Bash on Ubuntu (on Windows)&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\bash.exe&quot;// zsh&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\bash.exe&quot;,&quot;terminal.integrated.shellArgs.windows&quot;: [ &quot;-c&quot;, &quot;zsh&quot;],// cmder&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;,&quot;terminal.integrated.shellArgs.windows&quot;: [ &quot;/K&quot;, &quot;C:\\\\cmder\\\\vscode.bat&quot;],// font &amp; fontSize&quot;terminal.integrated.fontFamily&quot;: &quot;DejaVu Sans Mono for powerline&quot;,&quot;terminal.integrated.fontSize&quot;: 15, zsh 之前看一些教學，很多大神 terminal 都不知道在猛什麼的，所以就想來改一下，查一下才知道大家都用 oh-my-zsh 來修改，它本身也自帶許多 themes 可以用，或者去拉別人的 custom theme 來用。 以下列出大致的步驟： 開啟 Windows10 上的 WSL，並於 Microsoft store 安裝 Ubuntu 下載 curl, git, zsh, oh-my-zsh, powerline fonts 於 .bashrc 中加入 bash -c zsh 啟動 zsh 創建及修改 .zshrc 至 VSCode 使用者選項中加入 zsh 的啟動選項 詳細步驟可參考下列連結： Windows Subsystem for Linux 環境配置 (最新 1709 版) How to Install Zsh and Oh My Zsh on Windows 10 Windows 10上整合Vs code的Oh-my-zsh(20180119更新) 最後發生一個問題就是，在 Ubuntu 中排版是正確的。但是因為想要用的 zsh theme 格式在 VSCode 中會跑掉，而且它的圖示也會亂跳，所以也就放棄使用了。- 歪掉的結果如下圖： cmder 在放棄 zsh 後， google 之後發現這個在 Windows 上頗受好評的 terminal，於是就來試試看 cmder。 安裝設定流程可以參考： - Using cmder as integrated shell in VSCode 不過使用文章中的 init.bat 我的情況是啟動不了，要另外創一個 .bat 去呼叫 init.bat 才行。方法在下面 QA 中。 若要正常啟動且將預設的啟動目錄改成當前目錄可參考： - Q: Can I use Cmder’s shell with the terminal on Windows? 修改 theme 參考連結： - Cmder-powerline-prompt 不過改了這個之後，原先的 cmder 的 prompt symbol (λ) 會消失解決辦法：λ character disappeared 將 prompt 絕對路徑修改成當前資料夾 - Display current directory, not the path Bug 使用 vscode + cmder 目前遇到一個小問題，就是 terminal 中的 cursor 動畫不會跟實際位置對齊，有時候會多往右邊一格。cmder.exe 是正常的，但是 vscode 中會有此 bug，目前也找不到解法，先在此紀錄一下。 後來發現在 vscode.bat 加入下列修改，可以在”第一次”開起時”有機率”不會出現此 BUG。12set LANG=en.US.UTF8chcp 65001 最後修改完之後成果如下，好看到不行！ Python 套件 安裝套件 - 直接在 Marketplace 搜尋 Python 安裝即可 - Python in Visual Studio Code: 介紹 Python 套件的官方 Blog 設定 Python 路徑 如 Manually specifying an interpreter 所提到的，直接覆蓋過預設路徑就好 1&quot;python.pythonPath&quot;: &quot;I:\\\\Anaconda3\\\\envs\\\\vscode\\\\python.exe&quot;, 註：這裡指向的是 Anaconda 所建立的環境，好處就是管理套件方便。 Pylint 設定 使用以下兩行設定將 Pylint 打開 正常來說我們可以設定自己的 pylintPath，但是實測發現指定路徑 pylint 會無效，不確定是不是 Windows10 的問題，用預設的就沒問題。 12&quot;python.linting.pylintPath&quot;: &quot;pylint&quot;,&quot;python.linting.pylintEnabled&quot;: true, 接下來使用以下指令來生成 pylint 的設定 1pylint --generate-rcfile &gt; .pylintrc [NOTE] 編碼問題如果在執行 pylint 時遇到 utf-8 的編碼問題UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0我的情況是因為 PowerShell 終端產生出來的 .pylintrc 是 USC-2 編碼因此只要使用 Notepad++ 更改文件編碼至 utf-8 就可以了- 參考至 Pylint does not work in visual studio code [Problem] pylint - no name ‘Qt’ in module ‘PyQt5.Core’ 執行 pylint 時卻碰到一整排 no name xxx in module xxx 的問題 四處搜尋之後發現好像無解，一堆人遇到也沒解法 也因為不影響執行，後來大家幾乎都推薦直接設定 pylint 忽略套件檢查 在 .pylintrc 中設定忽略檢查的套件 123extension-pkg-whitelist=PyQt5ignored-classes=PyQt5ignored-modules=PyQt5 或者在 使用者設定 中輸入 12345&quot;python.linting.pylintArgs&quot;: [ &quot;--extension-pkg-whitelist=PyQt5&quot;, &quot;--ignored-classes=PyQt5&quot;, &quot;--ignored-modules=PyQt5&quot; ] 參考至 How do I get PyLint to recognize numpy members? 忽略 pylint ! 警告 pylint 也會檢查 coding style 是否符合規範 如果不想要看到一堆討人厭的藍色 ! warning 可以將其關閉 方法如下，也是在使用者設定中設置選項 123&quot;python.linting.pylintArgs&quot;: [ &quot;--disable=R,C&quot; ] 其意義為忽略 R 開頭和 C 開頭的警告 參考至- How to turn off pylint warning?- PyLint Messages 最後設定完成後，pylint 就會顯示比較乾淨的 warning 了 Git 套件VSCode 本身就支援 Git 操作，但是有兩個套件真的猛，裝下去直接我的天 Git Lens Git History Markdown 套件這邊使用的是之前在 Atom 用的 Markdown 套件 - Markdown Preview Enhanced另外還有使用 Markdown 語法檢查套件 - markdownlint沒用之前還真的不知道以前寫的 markdown 都不符合規範XD markdownlint 關閉語法規範 在使用者設定中可以關閉不想檢查的規範 12345&quot;markdownlint.config&quot;: { &quot;MD013&quot;: false, &quot;MD029&quot;: false, &quot;MD007&quot;: false}, 小技巧：使用 &lt;!-- anchor --&gt; 同步兩視窗 因為 scroll sync 會被大圖片破壞掉同步機制，導致兩視窗不對齊。 因此最好是在圖片的下方加上 &lt;!-- anchor --&gt; 來對齊視窗。例如： 12![img_name](img_link)&lt;!-- anchor --&gt; - 參考至 scrollSync trouble in vscode 以下分享我 MPE 的設定 User setting 12345&quot;markdown.preview.breaks&quot;: true,&quot;markdown.preview.fontFamily&quot;: &quot;DejaVu Sans Mono, '微軟正黑體'&quot;,&quot;markdown-preview-enhanced.enableTypographer&quot;: true,&quot;markdown-preview-enhanced.printBackground&quot;: true,&quot;markdown-preview-enhanced.previewTheme&quot;: &quot;monokai.css&quot;, style.less 1234567891011121314151617181920212223242526@font-face { font-family: 'bitstream-vera'; src: url('../fonts/resources/bitstream-vera/bitstream-vera.woff');}@font-face { font-family: 'dejavu'; src: url('../fonts/resources/dejavu/dejavu.ttf');}font-family: 'DejaVu Sans Mono', 'dejavu', 'bitstream-vera', sans-serif, &quot;微軟正黑體&quot;;font-size: 17px;/* Inline Code */code { font-family: 'DejaVu Sans Mono', 'dejavu', &quot;微軟正黑體&quot;;}/* Code Block */pre { font-family: 'DejaVu Sans Mono', 'dejavu', &quot;微軟正黑體&quot;; // white-space: pre-wrap;}strong { font-size: 1.1rem;} 其他套件 Bracket Pair Colorizer 括弧上色，以利辨識多重括弧 filesize 顯示檔案大小 Magic Python Syntax highlighter for Python 3 One Monokai Theme 還不錯看的主題 - 需添加下列設定 1&quot;workbench.colorTheme&quot;: &quot;One Monokai&quot;, VSCode Log Output Colorizer Highlighter for log output TODO Highlighter 將你的 TODO 上亮到不行的顏色 VSCode Great Icons 比預設好分辨的 Icons - 需添加下列設定 1&quot;workbench.iconTheme&quot;: &quot;vscode-great-icons&quot;, 結語在 VSCode 剛出的時候我有用過，但是那時的套件真得慘不忍睹，不是功能少，就是有 bug，所以當時就直接跑去用 Atom 了。但是現在完全逆轉惹阿，套件支援度很夠，雖然有時候還是會有一些小 bug，不過已經瑕不掩瑜了。重點是現在的 integrated terminal 真的不錯，不用切來切去就是爽，雖然 Windows 上還是遇到滿多坑的 QQ，不過現階來說 VSCode 已經是我的編輯器首選了。 另外偷偷抱怨一下，用 C/C++ 套件來編譯 C/C++ code 還是很麻煩阿，Windows 上還是用 IDE 就好，不然就只能開 Linux 來寫比較快。","link":"/my-vscode-setting"},{"title":"New Journey","text":"New Journey時隔多年，寫網誌的衝動又再度浮現，不知道這次能持續多久 現在 HEXO 也改進了不少，好用很多，順便紀錄一下一些設定 Packages12345678# git deploynpm install hexo-deployer-git --save# sitemapnpm install hexo-generator-sitemap --save# hexo-adminnpm install --save hexo-admin# themenpm install hexo-theme-icarus Setting Post template in scaffolds/ sitemap Comment - disque Theme特別提一下 theme: hexo-theme-icarus 原本是指用 Next 黑白簡約的風格，不過這次看到 icarus 整個被燒到 附帶的功能非常齊全，於是就換一下風格，重新出發!!!","link":"/New-Journey"}],"tags":[{"name":"VSCode","slug":"VSCode","link":"/tags/VSCode/"},{"name":"cmder","slug":"cmder","link":"/tags/cmder/"},{"name":"prompt","slug":"prompt","link":"/tags/prompt/"},{"name":"HEXO","slug":"HEXO","link":"/tags/HEXO/"},{"name":"Murmur","slug":"Murmur","link":"/tags/Murmur/"}],"categories":[{"name":"VSCode","slug":"VSCode","link":"/categories/VSCode/"},{"name":"Murmur","slug":"Murmur","link":"/categories/Murmur/"},{"name":"HEXO","slug":"HEXO","link":"/categories/HEXO/"}]}