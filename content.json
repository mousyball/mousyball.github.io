{"pages":[],"posts":[{"title":"Cmder-powerline-env-prompt for conda","text":"紀錄一下修改 Cmder-powerline-prompt 的過程 起因原先使用 Cmder-powerline-prompt 時，發現一個缺點，就是這個設定不能像一般 prompt，能在 prompt symbol 前顯示 anaconda 的環境名稱。 順便一提，cmder 本身已經支援此功能，但是對於使用者自訂的主題來說，通常會 override 原本的 prompt setting，所以還是要做一些修改。另外一個需要動手修改原因就是主題的擁有者似乎已經不更新了。 本修改 Cmder-powerline-env-prompt for conda 是融合兩版本結果- Cmder-powerline-prompt: 原作者- cmder-powerline-venv-prompt: 修改原作且有環境變數的版本，但也因為太久沒更新而出現了一些 BUG 修改的內容先說個題外話，因為我本身完全不懂 lua，所以我的貢獻只是讓他正常工作而已，並沒有修改其中的功能。 另外，cmder-powerline-venv-prompt 的作者在完成之後，Cmder-powerline-prompt 的原作有持續更新了一些功能，因此就順手整合一下。 以 cmder-powerline-venv-prompt 為基礎，加入 Cmder-powerline-prompt 的環境變數修改內容 修改 function get_virtual_env(env_var) - 因為使用原先的版本會造成一個 BUG，而且 env_path 已經是我們要的環境名稱了，所以就直接 return。 BUG: attempt to index global ‘exports’ (a nil value) From12345678function get_virtual_env(env_var) env_path = clink.get_env(env_var) if env_path then basen = exports.basename(env_path) return basen end return falseend To1234567function get_virtual_env(env_var) env_path = clink.get_env(env_var) if env_path then return env_path end return falseend 修改 function conda_prompt_filter() - 原先的作法不管怎樣輸出都是 nil，查了一下才發現使用 'CONDA_DEFAULT_ENV' 才會正確回傳環境變數名稱。 From 1local python_env = get_virtual_env('DEFAULT_ENV') To 1local python_env = get_virtual_env('CONDA_DEFAULT_ENV') 調整 override the built-in filters 的順序 - 若順序或優先權不對，也是會被蓋過而沒顯示。 From 12345clink.prompt.register_filter(conda_prompt_filter, 20)clink.prompt.register_filter(lambda_prompt_filter, 55)clink.prompt.register_filter(colorful_hg_prompt_filter, 60)clink.prompt.register_filter(colorful_git_prompt_filter, 60)clink.prompt.register_filter(venv_prompt_filter, 65) To 12345clink.prompt.register_filter(lambda_prompt_filter, 55)clink.prompt.register_filter(conda_prompt_filter, 58)clink.prompt.register_filter(venv_prompt_filter, 58)clink.prompt.register_filter(colorful_hg_prompt_filter, 60)clink.prompt.register_filter(colorful_git_prompt_filter, 60) 成果 Github repo:- Cmder-powerline-env-prompt for conda 後記在 Cmder 最新的 v1.3.5 版本，這個主題會完全不能使用，Cmder v1.3.4 卻可以正常工作。感覺是這個主題的 .lua 檔完全看不到 clink.lua 的內容所產生的 BUG，之後有空再找個時間發個 issue 問問看是怎麼回事。以下是發生的 BUG： BUG in Cmder v1.3.5- attempt to call global ‘get_git_branch’ (a nil value) 20180203 Update結果就用一個很簡單的做法就搞定了，就是把缺的 funciotn 從 clink.lua 複製過來就好。 缺的有下列兩個 function: 12local function get_git_branch(git_dir)local function get_hg_branch() 新增 function 後，就可以正常在 Cmder v1.3.5 下使用了。 20180409 Update原先在 vscode terminal 使用 cmder 時會有一個 bug，就是會在 prompt symbol λ 後面隨機產生一些空白，它會讓鼠標動畫和實際位置搭不上，而且這個情況是隨機發生的，因此我也沒有太理它，就只是讓人很煩躁而已。 直到今天意外在改 git-bash prompt 的時候發現，我使用 λ 當作 prompt symbol 也會發生這個情況，所以很直覺判斷說應該是編碼的問題。果不其然，當我把 λ 改成 ASCII 內的符號時 ($, #, @, …)，那個隨機空白情況就消失了。 完全不知道為什麼使用 utf-8 的符號會有這個問題，也有使用 Active code page: 65001，不過至少意外地解決掉這個 bug 了。","link":"/2018/02/23/Cmder-powerline-env-prompt-for-conda/"},{"title":"Hello World","text":"這個blog基本上是存放我的一些學習筆記，和一些學習過程遇過問題的解決方法，如果各位路過看到我有寫錯什麼，請各位不吝指教，我會很感激您的。 順便留一下我寫這篇文章的契機：為什麼你應該寫一個技術分享的部落格？ 我原本其實很懶得記錄學習歷程的，一來是寫出來給人看，如果是錯的，會誤導別人；二來是我總是希望把內容寫的詳細一點，會花很多時間。但是東西越學越多之後，發現很多記憶都不是很清楚了(年紀大惹QQ)，所以我還是決定開始寫這個部落格。 最後，用連結內的一句話結尾吧。 一個最好的學習方式，就是嘗試把自己學會的東西拿來教別人。","link":"/2017/01/01/hello-world/"},{"title":"Hexo + Github Blog 建立過程","text":"這篇文章就簡單紀錄一下，建立這個 Blog 的過程。 建置環境OS: Windows 10Hexo: 3.2.2Node.js: 8.9.4Github Desktop Blog 建立步驟 安裝 Node.js 和 Git Desktop - Node.js：版本我是載當時最新的 8.9.4。 - Github Desktop Github 配置創建放置 Blog 檔案的 Repository [Note] Repository 名稱為 yourname.github.io，yourname是你的帳號名稱 Github Desktop 與 Github 同步首先，把剛創的 Repository Clone 到本地端：然後右鍵剛拉下來的 Repository，選取 Open in Git Shell 打開 powershell，執行指令將 Github 上的倉庫拉到本地端。 1git pull origin master 安裝 Hexo首先，使用 npm 安裝 hexo 1npm install -g hexo-cli 安裝成功後，輸入以下指令可查看安裝版本 1234567$ hexo versionhexo: 3.2.2hexo-cli: 1.0.2os: Windows_NT 10.0.10586 win32 x64http_parser: 2.7.0node: 7.3.0... 接下來就可以來初始化我們的第一個 Blog 了，依序輸入以下指令： 1234hexo init # 初始化 blognpm install # 安裝相關套件hexo g # 產生 blog 靜態文件hexo s # 啟動本地瀏覽，用於預覽 blog 再來就可以用瀏覽器訪問http://localhost:4000/了，預設會有一個 Hello-World 的文章，如 Hexo’s Hello World。 安裝其他插件 hexo-deployer-git 1npm install hexo-deployer-git --save 修改設定- repo: 儲存庫（Repository）網址- branch: 分支名稱。如果您使用的是 GitHub 或 GitCafe 的話，程式會嘗試自動偵測。- message: 自定提交訊息 12345deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] hexo-admin 安裝 hexo 後台 1npm install hexo-admin-qiniu --save 使用方法 12$ hexo server -dopen &quot;http://localhost:4000/admin/&quot; hexo-git-backup 1npm install hexo-git-backup --save 使用方法 1hexo backup hexo-generator-sitemap 安裝 1$ npm install hexo-generator-sitemap --save 於 _config.yml 加入 12sitemap: path: sitemap.xml HEXO Blog 設定安裝主題使用的主題為 NEXT 12cd hexogit clone https://github.com/theme-next/hexo-theme-next themes/next 於 _config.yml 中修改使用主題 1theme: next 主題設定 scheme 至 next/_config.yml 修改至 scheme: Muse animation 因為我不喜歡動畫所以把它關掉 123# Use velocity to animate everything.motion: enable: false disqus 12345disqus: enable: true shortname: [your_disqus_name] count: true lazyload: false MathJax 12math: enable: true Post updated time 1updated_at: true Blog 配置 tags/categories page 設定方法照 iissnan/hexo-theme-next - Wiki - 创建分类页面 - 创建标签云页面 這兩個教學去設定 設定文章開頭的 snippet 在 scaffolds 下的 post.md 文件，其功能是用來建置文章的初始狀態。 1234567title: {{ title }}author: Mo1cibodate: {{ date }}tags:categories:permalink:mathjax: false Disqus 留言板 簡單步驟如下 1.去 Disqus 申請帳號 2.去 next/_config.yml 中貼上自己的 disqus shortname 12345disqus: enable: true shortname: [your_disqus_name] count: true lazyload: false 詳細的設定及修改可以參考以下網頁 解決 Hexo Comment ! Disqus 留言系統基本設定與匯入舊留言教學 設定字型 1.於 Google Fonts 上找想要的字型，例如 DF Dejavu Pro Regular 2.於 next/_config.yml 中加入 1234global: external: true family: DF Dejavu Pro Regular size: Permalink 使用永久連結主要有兩個原因 1.避免修改標題後，搜尋引擎找到舊的網址。 2.自訂英文網址，使搜尋引擎關鍵字容易查詢到。 可參考: Permalinks Google Analytics 註冊 Google Analytics 修改 _config.yml，新增ID：google_analytics: UA-xxxxxxxx-x Google Search console 依照指示將一個 html 上傳至 repo 驗證 Favicon 依照喜好於 next/_config.yml 修改網頁的小圖示 圖片路徑為： ...\\Blog\\themes\\next\\source\\images 12345favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg Avatar 依照喜好於 next/_config.yml 修改網頁的小圖示 圖片路徑為： ...\\Blog\\themes\\next\\source\\images 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /images/avatar.gif sitemap安裝完 hexo-generator-sitemap，然後 deploy 就會在 public 資料夾自動產生 sitemap.xml 再來到 _config.yml 加入 sitemap 選項 然後就可以到 google search console 上面設定 sitemap 路徑了 以往經驗大概過一兩天就會撈到資料了 可參考: ｜Hexo优化｜如何向google提交sitemap（详细） 常用 HEXO 指令新增 page / post 12$ hexo new &quot;postName&quot; # 產生新的文章$ hexo new page &quot;pageName&quot; # 產生新的頁面 指令簡寫 1234$ hexo n == hexo new # 產生新的 post/page/draft$ hexo g == hexo generate # 產生靜態文件$ hexo s == hexo server # 啟動本地瀏覽$ hexo d == hexo deploy # 部署文件至 Github 上 指令組合 12$ hexo d -g # 產生靜態文件後，部署 blog$ hexo s -g # 產生靜態文件後，預覽 blog 使用 hexo-admin 12$ hexo server -dopen &quot;http://localhost:4000/admin/&quot;","link":"/2018/02/12/Hexo-Github-Build/"},{"title":"New Journey","text":"時隔多年，寫網誌的衝動又再度浮現，不知道這次能持續多久 現在 HEXO 也改進了不少，好用很多，順便紀錄一下一些設定 Packages12345678# git deploynpm install hexo-deployer-git --save# sitemapnpm install hexo-generator-sitemap --save# hexo-adminnpm install --save hexo-admin# themenpm install hexo-theme-icarus Theme特別提一下 theme: hexo-theme-icarus 原本是指用 Next 黑白簡約的風格，不過這次看到 icarus 整個被燒到 附帶的功能非常齊全，於是就換一下風格，重新出發!!! SettingPost Template Permalink of post template in scaffolds/要在 _config.yml 增加變數 urlname，再去 scaffold/_post.md 增加 tag urlname 即可 hexo permalink设置技巧 Article Readmore文章不要展開至 #more 位置，而是開頭 Path: themes\\icarus\\layout\\common\\article.jsx 修改 from: {url_for(page.link || page.path)}#more to: {url_for(page.link || page.path)} Post 內改為 2 columns Page 預設為 3 columns，Flexible Theme Configuration 作者有提供此功能，只要新增 _config.post.md，然後在裡面把想要的 widgets 放置左側即可 頁面寬度這裡會需要修改兩個地方 themes\\icarus\\layout\\common\\article.jsx將 column_size 由 4 -&gt; 3 12345678910function getColumnSizeClass(columnCount) { switch (columnCount) { case 2: //return 'is-4-tablet is-4-desktop is-4-widescreen'; return 'is-4-tablet is-4-desktop is-3-widescreen'; case 3: return 'is-4-tablet is-4-desktop is-3-widescreen'; } return '';} themes\\icarus\\include\\style\\responsive.stylbase.styl 有設定 $fullhd ?= 1472px，剩下就把 responsive.styl 的設定都改成 fullhd sizeNOTE: 2 欄及 3 欄都要修改，否則切換頁面會對不齊 12345678+fullhd() .is-3-column .container max-width: $fullhd - 0 * $gap width: $fullhd - 0 * $gap .is-2-column .container max-width: $fullhd - 0 * $gap width: $fullhd - 0 * $gap toc 顯示需要在 front-matter 中添加 1toc: true [TODO] toc 預設展開 主題不支援預設展開 toc，而是隨著定位展開 sub-header。而且預設 sidebar 是不連動滑動，所以在滑動時，會造成文章往下滑，就看不到上方展開的 toc 目前的解決方案是把 toc 移到 profile widget 上方，並調整 sidebar 為 sticky mode [許願] 希望之後能夠支援預設展開 toc (ps: 我不會前端阿QQ) Image 圖片置中theme 預設是靠左，在 themes\\icarus\\include\\style\\article.styl 可以增加文章內的圖片 margin 屬性 參考: 文章图片居中 12345678910&amp;.article ... .content ... a img margin: auto display: block 圖片封面與縮圖在 front-matter 內加入 tag: cover 與 thumbnail 參考 icarus 主題配置 支援 local image 或 url 12cover: /gallery/covers/cover.jpgthumbnail: /gallery/thumbnails/thumbnail.jpg 調整文章內外 cover image 顯示範圍 針對 image class 去做限制高度，Home 下的調窄一些 Home (.fill): height: 287 Page (.center): height: 487 img 使用 cover 模式 置中 高度與 imagebox 相同 12345678910111213141516.image .center width: 100% !important height: 487px !important object-fit: cover object-position: 50% 50% .avatar height: 100% object-fit: cover .fill object-fit: cover width: 100% !important height: 287px !important object-position: 50% 50% 圖片放置位置theme/source 底下找個資料夾放就好，呼叫以相對路徑於 theme/source Path: theme/source/img 或 theme/source/gallery front-matter template1234567891011121314---title: {{ title }}author: Mo1cibodate: {{ date }}tags: -categories: -urlname:mathjax: falsetoc: truecover:thumbnail:--- Others Sitemap template: hexo-generator-sitemap/sitemap.xml Comment disque References hexo-theme-icarus 博客更换ICARUS主题 hexo permalink设置技巧 Hexo博客主题之Icarus的设置与美化（进阶）","link":"/2020/11/01/new-journey/"},{"title":"Image resize in HTML","text":"目前Blog才剛創，編輯還不太熟，突然想到要放圖片怎麼辦？ 以下是Markdown放圖的語法 1![link text](url) RRR，好像太大了。Google後才發現，Markdown好像不支援內建resize。然後又google到這篇Image re-size to 50% of original size in HTML雖然我不會html，不過照著回答的方法做可以成功。 後來又發現這個HTML的網站很詳細：w3schoolHTML &lt;img&gt; Tag Resize語法依照比例縮放測試後發現，給定width百分比就好。其中alt屬性對應到的是[link text] 1&lt;img src=&quot;url&quot; alt=&quot;text&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt; 依指定長寬縮放1&lt;img src=&quot;url&quot; alt=&quot;text&quot; width=&quot;150&quot; height=&quot;300&quot; /&gt; Image Source: Link","link":"/2017/01/01/image-resize/"},{"title":"HEXO - Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2017/01/01/index/"},{"title":"Hexo 顯示數學公式","text":"問題: 無法在 Hexo 中直接顯示數學公式？在 Markdown 編輯器中，一般都會支援 MathJax or LaTex 的數學公式語法。 但是推上 Blog 之後，顯示還是如原本一樣。 1\\alpha^3 + \\beta^6 - \\gamma^2 \\times 3x \\div 8y^5 + \\omega ## 如何在 Hexo 中顯示數學公式 Google 後發現兩種解法： 修改 marked.js 修改的原因是 Hexo 渲染時，數學公式會與預設的跳脫字元衝突，導致數學公式不完整，而顯示不出來。 不過這個方法的缺點就是耗時修改，時間就是金錢，有簡單的方法就用唄。 安裝 Hexo MathJax plugin (推薦) 只要在部落格路徑下的 git shell 中，執行下列安裝指令即可： 1npm install hexo-math --save 於 _config.yml 加入 1234567891011math: engine: 'mathjax' # or 'katex' mathjax: src: custom_mathjax_source config: # MathJax config katex: css: custom_css_source js: custom_js_source # not used config: # KaTeX config 然後數學公式就可以正常顯示拉！ $$\\alpha^3 + \\beta^6 - \\gamma^2 \\times 3x \\div 8y^5 + \\omega$$ 20180211 更新最近換了 next 主題，發現 mathjax 好像失效了，又重新找方法看了一下 next/_config.yml 似乎有自帶支援 mathjax 於 next/_config.yml 開啟 mathjax 支援 123# Math Equations Render Supportmath:enable: true 於 post 的 snippet 加入 mathjax 12345678---title:author:date:tags:categories:mathjax: true--- 結果就可以正常顯示了，收工。 ## Reference Hexo MathJax插件搭建一个支持LaTEX的hexo博客MathJax have no effect #1774","link":"/2017/01/01/mathjax-support/"},{"title":"VSCode 使用設定","text":"這篇主要在記錄使用 VSCode 環境建立的採坑過程 OS: Windows 10 一般設定在 使用者設定 中添加下列修改 12345&quot;editor.formatOnPaste&quot;: true,&quot;editor.fontSize&quot;: 15,&quot;editor.fontFamily&quot;: &quot;DejaVu Sans Mono, '微軟正黑體'&quot;,&quot;editor.fontLigatures&quot;: true,&quot;editor.smoothScrolling&quot;: true, Keybindings為字串和 markdown 設定的快捷鍵，不確定這叫什麼名字，就叫 auto surrounding feature用途是一鍵將字串包起來，使用粗體、雙引號就不用一直移來移去了 設定方法： Ctrl+K then Ctrl+S Click to open keybindings.json 123456789101112131415161718192021222324252627{ // wrap a selection with single quotes (') &quot;key&quot;: &quot;'&quot;, &quot;command&quot;: &quot;editor.action.insertSnippet&quot;, &quot;when&quot;: &quot;editorHasSelection &amp;&amp; editorTextFocus&quot;, &quot;args&quot;: { &quot;snippet&quot;: &quot;'${0:${TM_SELECTED_TEXT}}$0'&quot; }},{ // wrap a selection with single quotes (*) &quot;key&quot;: &quot;numpad_multiply&quot;, &quot;command&quot;: &quot;editor.action.insertSnippet&quot;, &quot;when&quot;: &quot;editorHasSelection &amp;&amp; editorTextFocus&quot;, &quot;args&quot;: { &quot;snippet&quot;: &quot;**${0:${TM_SELECTED_TEXT}}$0**&quot; }},{ // wrap a selection with single quotes (&quot;) &quot;key&quot;: &quot;shift+'&quot;, &quot;command&quot;: &quot;editor.action.insertSnippet&quot;, &quot;when&quot;: &quot;editorHasSelection &amp;&amp; editorTextFocus&quot;, &quot;args&quot;: { &quot;snippet&quot;: &quot;\\&quot;${0:${TM_SELECTED_TEXT}}$0\\&quot;&quot; }}, Integrated Terminal VSCode - Integrated Terminal - 可以在 使用者設定 中，修改所需的 default terminal 1234567891011121314151617181920212223242526// Command Prompt&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;// PowerShell&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&quot;// Git Bash&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe&quot;// Bash on Ubuntu (on Windows)&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\bash.exe&quot;// zsh&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\bash.exe&quot;,&quot;terminal.integrated.shellArgs.windows&quot;: [ &quot;-c&quot;, &quot;zsh&quot;],// cmder&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;,&quot;terminal.integrated.shellArgs.windows&quot;: [ &quot;/K&quot;, &quot;C:\\\\cmder\\\\vscode.bat&quot;],// font &amp; fontSize&quot;terminal.integrated.fontFamily&quot;: &quot;DejaVu Sans Mono for powerline&quot;,&quot;terminal.integrated.fontSize&quot;: 15, zsh 之前看一些教學，很多大神 terminal 都不知道在猛什麼的，所以就想來改一下，查一下才知道大家都用 oh-my-zsh 來修改，它本身也自帶許多 themes 可以用，或者去拉別人的 custom theme 來用。 以下列出大致的步驟： 開啟 Windows10 上的 WSL，並於 Microsoft store 安裝 Ubuntu 下載 curl, git, zsh, oh-my-zsh, powerline fonts 於 .bashrc 中加入 bash -c zsh 啟動 zsh 創建及修改 .zshrc 至 VSCode 使用者選項中加入 zsh 的啟動選項 詳細步驟可參考下列連結： Windows Subsystem for Linux 環境配置 (最新 1709 版) How to Install Zsh and Oh My Zsh on Windows 10 Windows 10上整合Vs code的Oh-my-zsh(20180119更新) 最後發生一個問題就是，在 Ubuntu 中排版是正確的。但是因為想要用的 zsh theme 格式在 VSCode 中會跑掉，而且它的圖示也會亂跳，所以也就放棄使用了。- 歪掉的結果如下圖： cmder 在放棄 zsh 後， google 之後發現這個在 Windows 上頗受好評的 terminal，於是就來試試看 cmder。 安裝設定流程可以參考： - Using cmder as integrated shell in VSCode 不過使用文章中的 init.bat 我的情況是啟動不了，要另外創一個 .bat 去呼叫 init.bat 才行。方法在下面 QA 中。 若要正常啟動且將預設的啟動目錄改成當前目錄可參考： - Q: Can I use Cmder’s shell with the terminal on Windows? 修改 theme 參考連結： - Cmder-powerline-prompt 不過改了這個之後，原先的 cmder 的 prompt symbol (λ) 會消失解決辦法：λ character disappeared 將 prompt 絕對路徑修改成當前資料夾 - Display current directory, not the path Bug 使用 vscode + cmder 目前遇到一個小問題，就是 terminal 中的 cursor 動畫不會跟實際位置對齊，有時候會多往右邊一格。cmder.exe 是正常的，但是 vscode 中會有此 bug，目前也找不到解法，先在此紀錄一下。 後來發現在 vscode.bat 加入下列修改，可以在”第一次”開起時”有機率”不會出現此 BUG。12set LANG=en.US.UTF8chcp 65001 最後修改完之後成果如下，好看到不行！ Python 套件 安裝套件 - 直接在 Marketplace 搜尋 Python 安裝即可 - Python in Visual Studio Code: 介紹 Python 套件的官方 Blog 設定 Python 路徑 如 Manually specifying an interpreter 所提到的，直接覆蓋過預設路徑就好 1&quot;python.pythonPath&quot;: &quot;I:\\\\Anaconda3\\\\envs\\\\vscode\\\\python.exe&quot;, 註：這裡指向的是 Anaconda 所建立的環境，好處就是管理套件方便。 Pylint 設定 使用以下兩行設定將 Pylint 打開 正常來說我們可以設定自己的 pylintPath，但是實測發現指定路徑 pylint 會無效，不確定是不是 Windows10 的問題，用預設的就沒問題。 12&quot;python.linting.pylintPath&quot;: &quot;pylint&quot;,&quot;python.linting.pylintEnabled&quot;: true, 接下來使用以下指令來生成 pylint 的設定 1pylint --generate-rcfile &gt; .pylintrc [NOTE] 編碼問題如果在執行 pylint 時遇到 utf-8 的編碼問題UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0我的情況是因為 PowerShell 終端產生出來的 .pylintrc 是 USC-2 編碼因此只要使用 Notepad++ 更改文件編碼至 utf-8 就可以了- 參考至 Pylint does not work in visual studio code [Problem] pylint - no name ‘Qt’ in module ‘PyQt5.Core’ 執行 pylint 時卻碰到一整排 no name xxx in module xxx 的問題 四處搜尋之後發現好像無解，一堆人遇到也沒解法 也因為不影響執行，後來大家幾乎都推薦直接設定 pylint 忽略套件檢查 在 .pylintrc 中設定忽略檢查的套件 123extension-pkg-whitelist=PyQt5ignored-classes=PyQt5ignored-modules=PyQt5 或者在 使用者設定 中輸入 12345&quot;python.linting.pylintArgs&quot;: [ &quot;--extension-pkg-whitelist=PyQt5&quot;, &quot;--ignored-classes=PyQt5&quot;, &quot;--ignored-modules=PyQt5&quot; ] 參考至 How do I get PyLint to recognize numpy members? 忽略 pylint ! 警告 pylint 也會檢查 coding style 是否符合規範 如果不想要看到一堆討人厭的藍色 ! warning 可以將其關閉 方法如下，也是在使用者設定中設置選項 123&quot;python.linting.pylintArgs&quot;: [ &quot;--disable=R,C&quot; ] 其意義為忽略 R 開頭和 C 開頭的警告 參考至- How to turn off pylint warning?- PyLint Messages 最後設定完成後，pylint 就會顯示比較乾淨的 warning 了 Git 套件VSCode 本身就支援 Git 操作，但是有兩個套件真的猛，裝下去直接我的天 Git Lens Git History Markdown 套件這邊使用的是之前在 Atom 用的 Markdown 套件 - Markdown Preview Enhanced另外還有使用 Markdown 語法檢查套件 - markdownlint沒用之前還真的不知道以前寫的 markdown 都不符合規範XD markdownlint 關閉語法規範 在使用者設定中可以關閉不想檢查的規範 12345&quot;markdownlint.config&quot;: { &quot;MD013&quot;: false, &quot;MD029&quot;: false, &quot;MD007&quot;: false}, 小技巧：使用 &lt;!-- anchor --&gt; 同步兩視窗 因為 scroll sync 會被大圖片破壞掉同步機制，導致兩視窗不對齊。 因此最好是在圖片的下方加上 &lt;!-- anchor --&gt; 來對齊視窗。例如： 12![img_name](img_link)&lt;!-- anchor --&gt; - 參考至 scrollSync trouble in vscode 以下分享我 MPE 的設定 User setting 12345&quot;markdown.preview.breaks&quot;: true,&quot;markdown.preview.fontFamily&quot;: &quot;DejaVu Sans Mono, '微軟正黑體'&quot;,&quot;markdown-preview-enhanced.enableTypographer&quot;: true,&quot;markdown-preview-enhanced.printBackground&quot;: true,&quot;markdown-preview-enhanced.previewTheme&quot;: &quot;monokai.css&quot;, style.less 1234567891011121314151617181920212223242526@font-face { font-family: 'bitstream-vera'; src: url('../fonts/resources/bitstream-vera/bitstream-vera.woff');}@font-face { font-family: 'dejavu'; src: url('../fonts/resources/dejavu/dejavu.ttf');}font-family: 'DejaVu Sans Mono', 'dejavu', 'bitstream-vera', sans-serif, &quot;微軟正黑體&quot;;font-size: 17px;/* Inline Code */code { font-family: 'DejaVu Sans Mono', 'dejavu', &quot;微軟正黑體&quot;;}/* Code Block */pre { font-family: 'DejaVu Sans Mono', 'dejavu', &quot;微軟正黑體&quot;; // white-space: pre-wrap;}strong { font-size: 1.1rem;} 其他套件 Bracket Pair Colorizer 括弧上色，以利辨識多重括弧 filesize 顯示檔案大小 Magic Python Syntax highlighter for Python 3 One Monokai Theme 還不錯看的主題 - 需添加下列設定 1&quot;workbench.colorTheme&quot;: &quot;One Monokai&quot;, VSCode Log Output Colorizer Highlighter for log output TODO Highlighter 將你的 TODO 上亮到不行的顏色 VSCode Great Icons 比預設好分辨的 Icons - 需添加下列設定 1&quot;workbench.iconTheme&quot;: &quot;vscode-great-icons&quot;, 結語在 VSCode 剛出的時候我有用過，但是那時的套件真得慘不忍睹，不是功能少，就是有 bug，所以當時就直接跑去用 Atom 了。但是現在完全逆轉惹阿，套件支援度很夠，雖然有時候還是會有一些小 bug，不過已經瑕不掩瑜了。重點是現在的 integrated terminal 真的不錯，不用切來切去就是爽，雖然 Windows 上還是遇到滿多坑的 QQ，不過現階來說 VSCode 已經是我的編輯器首選了。 另外偷偷抱怨一下，用 C/C++ 套件來編譯 C/C++ code 還是很麻煩阿，Windows 上還是用 IDE 就好，不然就只能開 Linux 來寫比較快。","link":"/2018/02/12/my-vscode-setting/"},{"title":"為什麼要投資加密貨幣?","text":"以這篇文章記錄為什麼我開始投資加密貨幣 免責聲明：本篇不代表任何投資建議，投資有風險，加密貨幣更屬高風險投資，DYOR (Do Your Own Research) 確保你自己知道在投資什麼。 Intro.目前交易或投資經歷到現在約 2 年，在 202012 年末才剛接觸到加密貨幣，那時候的 BTC 的價格已經衝到 23000 左右，一二月的價格則約略在 30000 ~ 40000 間震盪。隨著 Elon Musk 在 twitter 上的推波助瀾，Doge coin 與 BTC 價格也被推高不少。在 20210218 時，TESLA 在 10-K 財報文件中揭露花費 1.5B 購買 BTC，隨著消息公布，BTC 價格也一舉突破前高，一路拉升至 48000。這一舉動是否代表更多上市公司會公開持有 BTC，若這是趨勢，BTC 要達到 500K 以上也不是不可能的。 雖然開始研究加密貨幣沒多久，但與其淵源可以追朔至 2014 年左右，當時是我第一次接觸到 BTC 這東西。當時在 PTT 八卦版上有位鄉民正在推廣 BTC 和去中心的概念，當時只因為有送 BTC 就去湊熱鬧，而那位鄉民就是現在 DigitalCurrency 的版主 DarkerDuck。當時很熱心地回答了我許多問題，不過當時送的比特幣已經死在某顆硬碟裡了。 早期接觸加密貨幣時，不外乎都是從媒體上接受到加密貨幣很危險，尤其是 2017 年 ICO 狂潮的時候，各種山寨幣滿天飛。當時還不了解，也覺得很危險，所以躲過了這波熊市，但也錯過了先前的牛市。 到了 2020 年末，這次認真開始研究 crypto，很大程度是因為累積了許多相關投資知識，加上許多跡象佐證，才讓我決定分一部份資產去投資 crypto。以下條列一些支持我投入 crypto 的因素： [Bitcoin Treasuries] 機構法人開始進場持有 BTC (MicroStrategy, Grayscale) DeFi (去中心化金融) 應用爆發 QE 資金不會無限制推高實體資產，crypto market 恰恰成為吸納資金的池子 BTC 作為信仰中心，又有總量限制，稀缺性導致價格長牛 以上簡介一下心路歷程，接下來會介紹如何入門加密貨幣市場、介紹收益方法、DeFi 項目、常用工具和潛在風險。 如何入門加密貨幣市場首先，要進入加密貨幣的世界，必須先去交易所開戶，但會需要在台灣及國外交易所各開一個帳號，台灣交易所作為法幣與加密貨幣的進出點，國外交易所則是主要用來買賣幣、轉錢包或進入交易所公鏈等用途。 台灣交易平台是使用 Maicoin (MAX 交易所)，開戶會需要做 KYC (Know Your Customer)，還有一些法律責任告知。手續費的部分，在 Maicoin 的交易手續費是包含在買賣點差上的。若要匯出至國外交易所，手續費則是 3 ~ 9 USDT 不等，因為以太坊 (ERC20) 的手續費浮動較大。另外，Maicoin 只支援 ERC20，因此接收時不要選錯地址或鏈。 為什麼要選擇在國外交易所操作，其中一個原因就是安全性的問題，我們可以到 CER: TOP 100 exchanges by Cybersecurity rating 去查看加密貨幣交易所的安全性排行，有無白帽駭客測試或保險等等。基本上選前十名的不會有太大的問題，因為我會要到幣安智能鏈 (BSC) 上參與 DeFi 項目，所以最後選擇 Binance。然後他的交易量很大，交易對 (pair) 也多，基本上可以滿足大部分的需求。 前面提到安全性的問題，交易所的都是熱錢包，基本上連網就是不安全，即使交易所都有保險，也難保哪一天消失或被駭，所以當資產量大的時候，使用離線的硬體冷錢包是很重要的。最熱門的是 Ledger Nano X，台灣的則有 CoolWallet S，幣安最近推的 SafePal 則是有支援 BEP20 (BSC)。雖然冷錢包一個都一兩千台幣以上，但相對於幣圈的收益根本是九牛一毛，保障財產的東西不要省。 Crypto 收益方法 購入加密貨幣賺取增值 主流: BTC, ETH DeFi: SNX, UNI, LINK, … 初期項目的幣，但風險高 提供穩定幣收取利息 提供 LP (流動性提供) 參加 Vault Staking 以上的收益方式風險程度各不相同，請自己斟酌參與，以下就敘述一下這些收益方式、評估方法及注意事項。 購買貨幣賺取增值: 我們可以依據貨幣的基本面、籌碼面評估長線投資可行性，或是用技術面去抓短線的買賣點位。Crypto 的基本面可以從 CoinGecko 這類的網站去看排名、交易量、總市值等。籌碼面可以從 Glassnode 等數據網站去查看 SOPR、HashRate、流通量或者是大鯨魚數量及持倉。 例如，在 2021 一月期間，BTC 大鯨魚的數量不斷在提升，我們可以依據此指標判斷目前是否屬於良性回測，及決定是否可以繼續持有。 技術面則是去看裸K、型態、技術指標、大量或支撐壓力等傳統技術分析方法。 至於幣別的選擇基本上很簡單，避免被 rug pull 就是少去碰初創項目，如果你很喜歡當個 degen，也不是不行。主流幣基本上在牛市的情況下分批購入是可以的。DeFi 項目幣就要看你個人的研究深淺了，怕有意外就挑大市值排名靠前的項目。若想體驗 10 倍或 100 倍的成就，DeFi 裡面其實不乏很多好項目，或者可以挑選非 ETH 鏈上的項目，ETH 目前因為 gas fee 太高，所產生的項目遷移及外溢效應，讓其他公鏈也一併高速發展，例如 BSC, HECO, DOT 等。其他鏈上複製 ETH 的項目都是可以考慮的選擇。 提供穩定幣收取利息: CEX (中心化交易所，如幣安) 有提供穩定幣活存、定存等收取利息的方式。與美元錨定的穩定幣有 USDT、USDC、BUSD 等，雖然 USDT 是目前流通量最大的穩定幣，但因其美元儲備並不是 100%，還有可能會面臨 SEC 的監管問題，不建議持有。個人會比較傾向持有 SEC 認可的穩定幣，如 USDC 及 BUSD。 還有一種就是將穩定幣去做放貸收取利息的，這類的 DeFi 項目很多，例如 AAVE。 提供 LP (流動性提供): CEX 或 DEX (去中心化交易所，如 Uniswap) 會需要用戶去提供流動性來維持交易所的買賣功能，用戶會提供交易對 (token pair)，然後交易所會將交易中間的手續費作為利息給流動性提供者。 LP 要注意 Impermanent Loss (IL)，詳細可以看 什麼是無常損失 的介紹。我個人是比較喜歡搭配一個穩定幣的 LP，若兩個都是波動大的幣 IL 太大了。 參加 Vault: DeFi 項目有一類是 Farm，提供的服務是 yield optimizer，裡面會有很多 vault 可以參加，將指定的幣別或是 LP token 存入，vault 會自動去優化收益。舉例來說，某個穩定幣的 vault 會去某些項目 staking token，但通常 reward 會需要手動 harvest，但 vault 會定時幫你收割，可能一天一次或一天好幾次，所以你的實際 APY 會比直接投項目還來得高不少。 農場類型的項目太多 rug pull，建議還是做好 research 在下手，項目有無 audit 是基本，鎖倉量高不高，社群公關做得好不好，社群發不發達，開發群有沒有對 vault 項目把關，這些都是判斷依據。這類的項目很建議直接去參與社群 (Discord, Telegram)，去感受社群氛圍，看是不是一堆 degen 仔，還是認真經營的。更 hardcore 的也可以去看 code，如果你有這個能力的話。 Staking: 詳細介紹可以看幣安的文章 什麼是Staking?。 舉兩個這類項目的例子 ETH 2.0 staking Curve.fi CRV staking ETH 2.0 staking 是收取利息；CRV staking 則是會得到 50% 的交易手續費還有收益池加速。 DeFiDeFi (Decentralized Finance) 去中心化金融項目是目前以太坊上最熱門的領域，基本上就是將金融系統去中心化，利用自動化來處理中介手續。 ETH 上常見的 DeFi 項目有 穩定幣 (DAI / Basis Cash) 借貸 (Aave / Compound) 去中心化交易所 (Uniswap / Curve) 收益聚合器 (Yearn / Alpha Homora) 保險 (Nexus Mutual) 其他還有像債券、期權平台、合成資產等等，就不一一列舉了。 ETH 與其他公鏈以太坊 (ETH) 隨著以太幣價格攀升與 DeFi 項目的活躍，ETH 的塞車情況日益嚴重，Gas fee 也一路水漲船高，近期平均都在 150 ~ 200 gwei 左右，造成一次交易可能都需要花 30 美金左右，若是操作複雜合約，按個 4、5 次怎麼受的了，基本上很大程度排擠了資金量不夠大的新進韭菜。 因此其他公鏈也順勢崛起，接收 ETH 逃跑的難民。例如有 DOT/AVAX/NEAR，CEX 公鏈則是有 BSC/HECO/OKExChain。這些鏈相較於 ETH 的最大優點就是速度快及手續費低。又因為是後進者，有 ETH 做為模仿對象，大量的 fork 項目也如雨後春筍般出現，但不僅僅只是複製，許多項目也發展出自己的特點。 雖然，有些人會因為 CEX 公鏈上的 DeFi 項目不那麼去中心化而有所排斥，不過我覺得太去中心化也會有效率問題，但我也不否認中心化壯大後的某些問題，最後應該會走向一個平衡點。至於如何選擇，就看個人信仰了。 個人目前是定居在 BSC 上，BSC 的好項目不少，例如 Venus / PancakeSwap / Autofarm / Beefy / bDollar 等等。但是出來炒一波就跑的項目也是不少，請掌控自己的貪念，少碰為妙，不然就用一筆輸得起的錢去賭就好。 工具 資訊統計與排名 CoinGecko CoinMarketCap ETH DeBank: 查詢 DeFi 項目/簡介/排行 Zapper: 統計你投資的 DeFi 項目與其收益 fees.wtf: 統計你到底花了多少 ETH 在 gas fee 上 BSC DeFi station: BSC 上的項目資訊與排名 Yieldwatch: 統計 BSC 上 DeFi 項目的收益 查價 cointrader: 查價格、畫線好用，但價格非即時 livecoinwatch: 5分鐘更新一次的線圖與即時價格 其他 DeFi Yield: 查詢農場有無 audit、風險程度或是 rug pull 了沒 Glassnode: 加密貨幣市場的各種數據，主要是針對 BTC Bitcoin Treasuries: 機構法人持有的 BTC 數量 更多支持原因與風險[正面因素] ARK 基金 (Cathie Wood) 的大力支持 機構法人 (MicroStrategy, Grayscale) 開始大量購買 BTC 等加密或幣作為資產 基金主理人 (Ray Dalio, Howard Marks) 支持比特幣作為資產配置的一部份 支付平台 (Paypal, Square) 支援購買加密貨幣 券商支援直接購買加密貨幣 美國貨幣監管署允許銀行使用穩定幣做為結算貨幣 TESLA 於財報公布購入 BTC 做為資產 兩大支付巨頭 (VISA, MasterCard) 宣布加密貨幣支付 傳統銀行開始接受 BTC 做為正常資產 現實法幣的貶值風險 鏈相關基礎建設日益完善，開發圈與生態系逐漸壯大 DeFi 蓬勃發展，有基本面撐腰，而非發空氣幣 [風險因素] 新任美國財政部長 Yellen 對於加密貨幣的態度 加密貨幣監管問題 Tether 並非 100% 美元儲備 穩定幣黑名單功能 DeFi 中的各種風險 (合約漏洞、去槓桿風險、流動性風險、預言機失效、閃電貸攻擊等等) 算力集中風險 (大部分都在中國) 駭客攻擊 政治風險 [其他中性因素] FB Libra 央行數位貨幣 CBDC 將 BTC 做為數位黃金的可能性 (稀缺性、耐用、可分割、可驗證)，適合做為價值儲存的工具 BTC 取代黃金市值的比例 未來資產分配對於加密貨幣的分配比例 資訊來源 [Youtube] Mr.Block 區塊先生: 各種 Defi 項目介紹，大推 链闻ChainNews Twitter of KOL 各項目的 Discord or Telegram 結語以上大致敘述了為什麼我會投資加密貨幣，種種跡象表明加密貨幣資產是下個革命性的領域，加上 QE 與各種消息面的支持，加密貨幣會更快速的進入我們的生活。 另外，現在讓我覺得有點像 2000 年初網路應用開始普及的感覺，但時代更迭總是會迎來舊思維的反抗，但我不會與錢過不去，風口來了，當隻豬也會飛阿。即使有顧慮而不踏入加密貨幣市場裡，但至少也可以投資相關股票 (ARKF, PYPL, GBTC 等)。 一生之中財富重分配的機遇沒幾次，2000 與 2008 離我已經太遠，2018 與 2020 的我，投資可能還不太成熟，沒把握的太好。2021 加密貨幣這次，該我了吧！","link":"/2021/02/12/why-invest-crypto/"}],"tags":[{"name":"VSCode","slug":"VSCode","link":"/tags/VSCode/"},{"name":"cmder","slug":"cmder","link":"/tags/cmder/"},{"name":"prompt","slug":"prompt","link":"/tags/prompt/"},{"name":"HEXO","slug":"HEXO","link":"/tags/HEXO/"},{"name":"Murmur","slug":"Murmur","link":"/tags/Murmur/"},{"name":"crypto","slug":"crypto","link":"/tags/crypto/"},{"name":"invest","slug":"invest","link":"/tags/invest/"}],"categories":[{"name":"VSCode","slug":"VSCode","link":"/categories/VSCode/"},{"name":"Murmur","slug":"Murmur","link":"/categories/Murmur/"},{"name":"HEXO","slug":"HEXO","link":"/categories/HEXO/"},{"name":"invest","slug":"invest","link":"/categories/invest/"}]}